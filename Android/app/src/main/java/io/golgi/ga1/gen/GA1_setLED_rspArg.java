/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

package io.golgi.ga1.gen;

import java.util.Hashtable;
import java.util.ArrayList;
import java.util.Iterator;
import com.openmindnetworks.golgi.JavaType;
import com.openmindnetworks.golgi.GolgiPayload;
import com.openmindnetworks.golgi.GolgiJSONException;
import com.openmindnetworks.golgi.GolgiJSONPayload;
import com.openmindnetworks.golgi.GolgiJSONValue;
import com.openmindnetworks.golgi.B64;
import com.openmindnetworks.golgi.api.GolgiException;
import com.openmindnetworks.golgi.api.GolgiAPI;
import android.os.Parcel;
import android.os.Parcelable;

public class GA1_setLED_rspArg implements Parcelable
{
    private static final String _golgiStructName = "GA1_setLED_rspArg";

    public static final boolean urlEncodeable = false;

    public int describeContents(){
        return 0;
    }

    public void writeToParcel(Parcel dest, int flags){
        dest.writeString(this.serialise().toString());
    }

    public static final Parcelable.Creator<GA1_setLED_rspArg> CREATOR = new Parcelable.Creator<GA1_setLED_rspArg>() {
        public GA1_setLED_rspArg createFromParcel(Parcel in) {
            return new GA1_setLED_rspArg(in);
        }
        public GA1_setLED_rspArg[] newArray(int size) {
            return new GA1_setLED_rspArg[size];
        }
    };
    private GA1_setLED_rspArg(Parcel in) {
        this(in.readString());
    }

    private boolean corrupt = false;

    public boolean isCorrupt() {
        return corrupt;
    }

    public void setCorrupt() {
        corrupt = true;
    }

    private boolean internalSuccess_IsSet = false;
    private int internalSuccess_;
    private boolean golgiExceptionIsSet = false;
    private GolgiException golgiException;

    public int getInternalSuccess_(){
        return internalSuccess_;
    }
    
    public boolean internalSuccess_IsSet(){
        return internalSuccess_IsSet;
    }
    
    public void setInternalSuccess_(int internalSuccess_){
        this.internalSuccess_ = internalSuccess_;
        this.internalSuccess_IsSet = true;
    }
    

    public GolgiException getGolgiException(){
        return golgiException;
    }
    
    public boolean golgiExceptionIsSet(){
        return golgiExceptionIsSet;
    }
    
    public void setGolgiException(GolgiException golgiException){
        this.golgiException = golgiException;
        this.golgiExceptionIsSet = true;
    }
    

    public StringBuffer serialise(){
        return serialise(null);
    }

    public StringBuffer serialise(StringBuffer sb){
        return serialise("", sb);
    }

    public StringBuffer serialise(String prefix, StringBuffer sb){
        if(sb == null){
            sb = new StringBuffer();
        }

        if(this.internalSuccess_IsSet){
            sb.append(prefix + "1: " + this.internalSuccess_+"\n");
        }
        if(this.golgiExceptionIsSet){
            golgiException.serialise(prefix + "" + 3 + "." , sb);
        }

        return sb;
    }

    public void deserialise(String str){
        deserialise(JavaType.createPayload(str));
    }

    private void deserialise(GolgiPayload payload){
        if(!isCorrupt() && payload.containsFieldKey("1:")){
            String str = payload.getField("1:");
            try{
                setInternalSuccess_(Integer.valueOf(str));
            }
            catch(NumberFormatException nfe){
                setCorrupt();
            }
        }
        
        if(!isCorrupt() && payload.containsNestedKey("3")){
            GolgiException inst = new GolgiException(payload.getNested("3"));
            setGolgiException(inst);
        }
        
    }

    private void fromJSON(String jsStr) throws GolgiJSONException{
        GolgiJSONPayload jp = new GolgiJSONPayload(jsStr);
        jp.parse();
        fromJSON(jp);
    }

    private void fromJSON(GolgiJSONPayload jp) throws GolgiJSONException{
        if(!isCorrupt()){
            Integer iVal = jp.getIntForTag("internalSuccess_");
            if(iVal != null){
                setInternalSuccess_(iVal.intValue());
            }
        }
        if(!isCorrupt()){
            GolgiException inst = null;
            GolgiJSONPayload nJp = jp.getObjectForTag("golgiException");
            if(nJp != null){
                try{
                    inst = GolgiException.fromJSONPayload(nJp);
                }
                catch(GolgiJSONException gjse){
                    throw new GolgiJSONException(gjse.getErrType(), gjse.getMessage() + "\nWhile decoding field 'golgiException' within " + _golgiStructName);
                }
            }
            if(inst != null){
                setGolgiException(inst);
            }
        }
    }

    public StringBuffer toJSON(StringBuffer sb){
        String _comma = "";
        if(sb == null){
            sb = new StringBuffer();
        }
        sb.append('{');

        if(this.internalSuccess_IsSet){
            sb.append(_comma + JavaType.genJSONTag("internalSuccess_"));
            sb.append(internalSuccess_);
            _comma = ",";
        }
        if(this.golgiExceptionIsSet){
            sb.append(_comma + JavaType.genJSONTag("golgiException"));
            sb.append(golgiException.toJSON());
            _comma = ",";
        }
        sb.append('}');

        return sb;
    }

    public StringBuffer toJSON(){
        return toJSON(null);
    }
    public GA1_setLED_rspArg(){
        this(true);
    }

    public GA1_setLED_rspArg(boolean isSetDefault){
        super();
        internalSuccess_IsSet = isSetDefault;
        internalSuccess_ = 0;
        golgiExceptionIsSet = isSetDefault;
        golgiException = new GolgiException(isSetDefault);
    }

    public GA1_setLED_rspArg(GolgiPayload payload){
        this(false);
        deserialise(payload);
    }

    public GA1_setLED_rspArg(String payload){
        this(JavaType.createPayload(payload));
    }

    public static GA1_setLED_rspArg fromJSONString(String jsStr) throws GolgiJSONException{
        GA1_setLED_rspArg inst = null;
        if(jsStr != null){
            inst = new GA1_setLED_rspArg(false);
            inst.fromJSON(jsStr);
        }
        return (inst == null || inst.isCorrupt()) ? null : inst;
    }

    public static GA1_setLED_rspArg fromJSONPayload(GolgiJSONPayload jPayload) throws GolgiJSONException{
        GA1_setLED_rspArg inst = null;
        if(jPayload != null){
            inst = new GA1_setLED_rspArg(false);
            inst.fromJSON(jPayload);
        }
        return (inst == null || inst.isCorrupt()) ? null : inst;
    }

}
