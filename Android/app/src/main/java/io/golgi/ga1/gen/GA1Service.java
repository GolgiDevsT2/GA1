/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

package io.golgi.ga1.gen;

import android.net.Uri;
import android.content.Context;

import java.util.Hashtable;
import java.util.ArrayList;
import java.util.Iterator;
import com.openmindnetworks.golgi.JavaType;
import com.openmindnetworks.golgi.GolgiPayload;
import com.openmindnetworks.golgi.GolgiJSONPayload;
import com.openmindnetworks.golgi.GolgiJSONException;
import com.openmindnetworks.golgi.B64;
import com.openmindnetworks.golgi.api.*;

public class GA1Service{
    public static class setLED{
        public interface ResultSender extends ResultSenderReceiver{
            public String getRequestSenderId();
        }

        public interface ResultSenderReceiver{
            public void success();
        }

        public interface ResultReceiver extends ResultSenderReceiver{
            public void failure(GolgiException ex);
        }

        public static class InboundResponseHandler implements GolgiAPIIBResponseHandler{
            private ResultReceiver resultReceiver;
        
            @Override
            public void error(int errType, String errText){
                GolgiException ex = new GolgiException();
                ex.setErrType(errType);
                ex.setErrText(errText);
                resultReceiver.failure(ex);
            }
        
            @Override
            public void remoteResponse(String payload){
                GA1_setLED_rspArg rsp;
                rsp = new GA1_setLED_rspArg(payload);
                if(rsp == null || rsp.isCorrupt()){
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(1)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
        
                if(rsp.getInternalSuccess_() != 0){
                    resultReceiver.success();
                }
                else{
                    GolgiException ex = new GolgiException();
                    ex.setErrText("corrupt response(2)");
                    ex.setErrType(golgi_message.ERRTYPE_PAYLOAD_MISMATCH);
                    resultReceiver.failure(ex);
                }
            }
            public InboundResponseHandler(ResultReceiver resultReceiver){
                this.resultReceiver = resultReceiver;
            }
        }

        public static void sendTo(ResultReceiver receiver, GolgiTransportOptions cto, String destination, int state){
            GA1_setLED_reqArg _arg = new GA1_setLED_reqArg();

            _arg.setState(state);

            StringBuffer sb = _arg.serialise();
            GolgiAPI.getInstance().sendRequest(new InboundResponseHandler(receiver), cto, destination, "setLED.GA1", sb.toString());
        }

        public static void sendTo(ResultReceiver receiver, String destination, int state){
            sendTo(receiver, null, destination, state);
        }

        public static void httpGet(ResultReceiver receiver, String destination, int state){
        }

        public interface RequestReceiver{
            public void receiveFrom(ResultSender resultSender, int state);
        }

        public static class InboundRequestReceiver implements GolgiAPIRequestReceiver,ResultSender{
            private RequestReceiver requestReceiver;
            private GolgiAPIOBResponseHandler obResponseSender;

            @Override
            public void incomingRequest(GolgiAPIOBResponseHandler handler, String payload){
                this.obResponseSender = handler;

                GA1_setLED_reqArg arg = new GA1_setLED_reqArg(payload);
                if(arg.isCorrupt()){
                    handler.remotePayloadError();
                    return;
                }
                requestReceiver.receiveFrom(this, arg.getState());
            }

            @Override
            public void success(){
                GA1_setLED_rspArg rspArg = new GA1_setLED_rspArg(false);
                rspArg.setInternalSuccess_(1);
                obResponseSender.send(rspArg.serialise().toString());
            }
            @Override
            public String getRequestSenderId(){
                return obResponseSender.getRequestSenderId();
            }
        

            public InboundRequestReceiver(RequestReceiver requestReceiver){
                this.requestReceiver = requestReceiver;
            }
        }

        public static void registerReceiver(RequestReceiver requestReceiver){
           GolgiAPI.getInstance().registerReqReceiver(new InboundRequestReceiver(requestReceiver), "setLED.GA1");
        }

    }
}
